// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lm.helloworld.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lm {

namespace {

const ::google::protobuf::Descriptor* am_broadcast_raw_data_to_channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  am_broadcast_raw_data_to_channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* am_dispatch_raw_datas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  am_dispatch_raw_datas_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lm_2ehelloworld_2eproto() {
  protobuf_AddDesc_lm_2ehelloworld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lm.helloworld.proto");
  GOOGLE_CHECK(file != NULL);
  am_broadcast_raw_data_to_channel_descriptor_ = file->message_type(0);
  static const int am_broadcast_raw_data_to_channel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(am_broadcast_raw_data_to_channel, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(am_broadcast_raw_data_to_channel, top_channel_id_),
  };
  am_broadcast_raw_data_to_channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      am_broadcast_raw_data_to_channel_descriptor_,
      am_broadcast_raw_data_to_channel::default_instance_,
      am_broadcast_raw_data_to_channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(am_broadcast_raw_data_to_channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(am_broadcast_raw_data_to_channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(am_broadcast_raw_data_to_channel));
  am_dispatch_raw_datas_descriptor_ = file->message_type(1);
  static const int am_dispatch_raw_datas_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(am_dispatch_raw_datas, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(am_dispatch_raw_datas, datas_),
  };
  am_dispatch_raw_datas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      am_dispatch_raw_datas_descriptor_,
      am_dispatch_raw_datas::default_instance_,
      am_dispatch_raw_datas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(am_dispatch_raw_datas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(am_dispatch_raw_datas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(am_dispatch_raw_datas));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lm_2ehelloworld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    am_broadcast_raw_data_to_channel_descriptor_, &am_broadcast_raw_data_to_channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    am_dispatch_raw_datas_descriptor_, &am_dispatch_raw_datas::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lm_2ehelloworld_2eproto() {
  delete am_broadcast_raw_data_to_channel::default_instance_;
  delete am_broadcast_raw_data_to_channel_reflection_;
  delete am_dispatch_raw_datas::default_instance_;
  delete am_dispatch_raw_datas_reflection_;
}

void protobuf_AddDesc_lm_2ehelloworld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023lm.helloworld.proto\022\002lm\"J\n am_broadcas"
    "t_raw_data_to_channel\022\016\n\006msg_id\030\001 \002(\r\022\026\n"
    "\016top_channel_id\030\002 \002(\004\"6\n\025am_dispatch_raw"
    "_datas\022\016\n\006msg_id\030\001 \001(\r\022\r\n\005datas\030\002 \001(\014", 157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lm.helloworld.proto", &protobuf_RegisterTypes);
  am_broadcast_raw_data_to_channel::default_instance_ = new am_broadcast_raw_data_to_channel();
  am_dispatch_raw_datas::default_instance_ = new am_dispatch_raw_datas();
  am_broadcast_raw_data_to_channel::default_instance_->InitAsDefaultInstance();
  am_dispatch_raw_datas::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lm_2ehelloworld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lm_2ehelloworld_2eproto {
  StaticDescriptorInitializer_lm_2ehelloworld_2eproto() {
    protobuf_AddDesc_lm_2ehelloworld_2eproto();
  }
} static_descriptor_initializer_lm_2ehelloworld_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int am_broadcast_raw_data_to_channel::kMsgIdFieldNumber;
const int am_broadcast_raw_data_to_channel::kTopChannelIdFieldNumber;
#endif  // !_MSC_VER

am_broadcast_raw_data_to_channel::am_broadcast_raw_data_to_channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void am_broadcast_raw_data_to_channel::InitAsDefaultInstance() {
}

am_broadcast_raw_data_to_channel::am_broadcast_raw_data_to_channel(const am_broadcast_raw_data_to_channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void am_broadcast_raw_data_to_channel::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0u;
  top_channel_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

am_broadcast_raw_data_to_channel::~am_broadcast_raw_data_to_channel() {
  SharedDtor();
}

void am_broadcast_raw_data_to_channel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void am_broadcast_raw_data_to_channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* am_broadcast_raw_data_to_channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return am_broadcast_raw_data_to_channel_descriptor_;
}

const am_broadcast_raw_data_to_channel& am_broadcast_raw_data_to_channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lm_2ehelloworld_2eproto();  return *default_instance_;
}

am_broadcast_raw_data_to_channel* am_broadcast_raw_data_to_channel::default_instance_ = NULL;

am_broadcast_raw_data_to_channel* am_broadcast_raw_data_to_channel::New() const {
  return new am_broadcast_raw_data_to_channel;
}

void am_broadcast_raw_data_to_channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 0u;
    top_channel_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool am_broadcast_raw_data_to_channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_channel_id;
        break;
      }
      
      // required uint64 top_channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &top_channel_id_)));
          set_has_top_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void am_broadcast_raw_data_to_channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }
  
  // required uint64 top_channel_id = 2;
  if (has_top_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->top_channel_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* am_broadcast_raw_data_to_channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }
  
  // required uint64 top_channel_id = 2;
  if (has_top_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->top_channel_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int am_broadcast_raw_data_to_channel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }
    
    // required uint64 top_channel_id = 2;
    if (has_top_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->top_channel_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void am_broadcast_raw_data_to_channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const am_broadcast_raw_data_to_channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const am_broadcast_raw_data_to_channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void am_broadcast_raw_data_to_channel::MergeFrom(const am_broadcast_raw_data_to_channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_top_channel_id()) {
      set_top_channel_id(from.top_channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void am_broadcast_raw_data_to_channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void am_broadcast_raw_data_to_channel::CopyFrom(const am_broadcast_raw_data_to_channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool am_broadcast_raw_data_to_channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void am_broadcast_raw_data_to_channel::Swap(am_broadcast_raw_data_to_channel* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(top_channel_id_, other->top_channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata am_broadcast_raw_data_to_channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = am_broadcast_raw_data_to_channel_descriptor_;
  metadata.reflection = am_broadcast_raw_data_to_channel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int am_dispatch_raw_datas::kMsgIdFieldNumber;
const int am_dispatch_raw_datas::kDatasFieldNumber;
#endif  // !_MSC_VER

am_dispatch_raw_datas::am_dispatch_raw_datas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void am_dispatch_raw_datas::InitAsDefaultInstance() {
}

am_dispatch_raw_datas::am_dispatch_raw_datas(const am_dispatch_raw_datas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void am_dispatch_raw_datas::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0u;
  datas_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

am_dispatch_raw_datas::~am_dispatch_raw_datas() {
  SharedDtor();
}

void am_dispatch_raw_datas::SharedDtor() {
  if (datas_ != &::google::protobuf::internal::kEmptyString) {
    delete datas_;
  }
  if (this != default_instance_) {
  }
}

void am_dispatch_raw_datas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* am_dispatch_raw_datas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return am_dispatch_raw_datas_descriptor_;
}

const am_dispatch_raw_datas& am_dispatch_raw_datas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lm_2ehelloworld_2eproto();  return *default_instance_;
}

am_dispatch_raw_datas* am_dispatch_raw_datas::default_instance_ = NULL;

am_dispatch_raw_datas* am_dispatch_raw_datas::New() const {
  return new am_dispatch_raw_datas;
}

void am_dispatch_raw_datas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 0u;
    if (has_datas()) {
      if (datas_ != &::google::protobuf::internal::kEmptyString) {
        datas_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool am_dispatch_raw_datas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }
      
      // optional bytes datas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void am_dispatch_raw_datas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }
  
  // optional bytes datas = 2;
  if (has_datas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->datas(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* am_dispatch_raw_datas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }
  
  // optional bytes datas = 2;
  if (has_datas()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->datas(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int am_dispatch_raw_datas::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }
    
    // optional bytes datas = 2;
    if (has_datas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datas());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void am_dispatch_raw_datas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const am_dispatch_raw_datas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const am_dispatch_raw_datas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void am_dispatch_raw_datas::MergeFrom(const am_dispatch_raw_datas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_datas()) {
      set_datas(from.datas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void am_dispatch_raw_datas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void am_dispatch_raw_datas::CopyFrom(const am_dispatch_raw_datas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool am_dispatch_raw_datas::IsInitialized() const {
  
  return true;
}

void am_dispatch_raw_datas::Swap(am_dispatch_raw_datas* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(datas_, other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata am_dispatch_raw_datas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = am_dispatch_raw_datas_descriptor_;
  metadata.reflection = am_dispatch_raw_datas_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lm

// @@protoc_insertion_point(global_scope)

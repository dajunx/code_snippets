// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm.helloworld.proto

#ifndef PROTOBUF_lm_2ehelloworld_2eproto__INCLUDED
#define PROTOBUF_lm_2ehelloworld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace lm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lm_2ehelloworld_2eproto();
void protobuf_AssignDesc_lm_2ehelloworld_2eproto();
void protobuf_ShutdownFile_lm_2ehelloworld_2eproto();

class userinfo;
class helloworld;

// ===================================================================

class userinfo : public ::google::protobuf::Message {
 public:
  userinfo();
  virtual ~userinfo();
  
  userinfo(const userinfo& from);
  
  inline userinfo& operator=(const userinfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const userinfo& default_instance();
  
  void Swap(userinfo* other);
  
  // implements Message ----------------------------------------------
  
  userinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userinfo& from);
  void MergeFrom(const userinfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);
  
  // required int32 pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline ::google::protobuf::int32 pwd() const;
  inline void set_pwd(::google::protobuf::int32 value);
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes some = 4;
  inline bool has_some() const;
  inline void clear_some();
  static const int kSomeFieldNumber = 4;
  inline const ::std::string& some() const;
  inline void set_some(const ::std::string& value);
  inline void set_some(const char* value);
  inline void set_some(const void* value, size_t size);
  inline ::std::string* mutable_some();
  inline ::std::string* release_some();
  
  // @@protoc_insertion_point(class_scope:lm.userinfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pwd();
  inline void clear_has_pwd();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_some();
  inline void clear_has_some();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 pwd_;
  ::std::string* name_;
  ::std::string* some_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_lm_2ehelloworld_2eproto();
  friend void protobuf_AssignDesc_lm_2ehelloworld_2eproto();
  friend void protobuf_ShutdownFile_lm_2ehelloworld_2eproto();
  
  void InitAsDefaultInstance();
  static userinfo* default_instance_;
};
// -------------------------------------------------------------------

class helloworld : public ::google::protobuf::Message {
 public:
  helloworld();
  virtual ~helloworld();
  
  helloworld(const helloworld& from);
  
  inline helloworld& operator=(const helloworld& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const helloworld& default_instance();
  
  void Swap(helloworld* other);
  
  // implements Message ----------------------------------------------
  
  helloworld* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const helloworld& from);
  void MergeFrom(const helloworld& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // optional int32 opt = 4;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 4;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);
  
  // repeated .lm.userinfo uinfo = 5;
  inline int uinfo_size() const;
  inline void clear_uinfo();
  static const int kUinfoFieldNumber = 5;
  inline const ::lm::userinfo& uinfo(int index) const;
  inline ::lm::userinfo* mutable_uinfo(int index);
  inline ::lm::userinfo* add_uinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::lm::userinfo >&
      uinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::lm::userinfo >*
      mutable_uinfo();
  
  // @@protoc_insertion_point(class_scope:lm.helloworld)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_opt();
  inline void clear_has_opt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::RepeatedPtrField< ::lm::userinfo > uinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_lm_2ehelloworld_2eproto();
  friend void protobuf_AssignDesc_lm_2ehelloworld_2eproto();
  friend void protobuf_ShutdownFile_lm_2ehelloworld_2eproto();
  
  void InitAsDefaultInstance();
  static helloworld* default_instance_;
};
// ===================================================================


// ===================================================================

// userinfo

// required int32 uid = 1;
inline bool userinfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userinfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userinfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userinfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 userinfo::uid() const {
  return uid_;
}
inline void userinfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// required int32 pwd = 2;
inline bool userinfo::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userinfo::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userinfo::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userinfo::clear_pwd() {
  pwd_ = 0;
  clear_has_pwd();
}
inline ::google::protobuf::int32 userinfo::pwd() const {
  return pwd_;
}
inline void userinfo::set_pwd(::google::protobuf::int32 value) {
  set_has_pwd();
  pwd_ = value;
}

// required string name = 3;
inline bool userinfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void userinfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void userinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void userinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& userinfo::name() const {
  return *name_;
}
inline void userinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void userinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void userinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* userinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes some = 4;
inline bool userinfo::has_some() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void userinfo::set_has_some() {
  _has_bits_[0] |= 0x00000008u;
}
inline void userinfo::clear_has_some() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void userinfo::clear_some() {
  if (some_ != &::google::protobuf::internal::kEmptyString) {
    some_->clear();
  }
  clear_has_some();
}
inline const ::std::string& userinfo::some() const {
  return *some_;
}
inline void userinfo::set_some(const ::std::string& value) {
  set_has_some();
  if (some_ == &::google::protobuf::internal::kEmptyString) {
    some_ = new ::std::string;
  }
  some_->assign(value);
}
inline void userinfo::set_some(const char* value) {
  set_has_some();
  if (some_ == &::google::protobuf::internal::kEmptyString) {
    some_ = new ::std::string;
  }
  some_->assign(value);
}
inline void userinfo::set_some(const void* value, size_t size) {
  set_has_some();
  if (some_ == &::google::protobuf::internal::kEmptyString) {
    some_ = new ::std::string;
  }
  some_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userinfo::mutable_some() {
  set_has_some();
  if (some_ == &::google::protobuf::internal::kEmptyString) {
    some_ = new ::std::string;
  }
  return some_;
}
inline ::std::string* userinfo::release_some() {
  clear_has_some();
  if (some_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = some_;
    some_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// helloworld

// required int32 id = 1;
inline bool helloworld::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void helloworld::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void helloworld::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void helloworld::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 helloworld::id() const {
  return id_;
}
inline void helloworld::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string str = 2;
inline bool helloworld::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void helloworld::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void helloworld::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void helloworld::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& helloworld::str() const {
  return *str_;
}
inline void helloworld::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void helloworld::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void helloworld::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* helloworld::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* helloworld::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 opt = 4;
inline bool helloworld::has_opt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void helloworld::set_has_opt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void helloworld::clear_has_opt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void helloworld::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 helloworld::opt() const {
  return opt_;
}
inline void helloworld::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// repeated .lm.userinfo uinfo = 5;
inline int helloworld::uinfo_size() const {
  return uinfo_.size();
}
inline void helloworld::clear_uinfo() {
  uinfo_.Clear();
}
inline const ::lm::userinfo& helloworld::uinfo(int index) const {
  return uinfo_.Get(index);
}
inline ::lm::userinfo* helloworld::mutable_uinfo(int index) {
  return uinfo_.Mutable(index);
}
inline ::lm::userinfo* helloworld::add_uinfo() {
  return uinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lm::userinfo >&
helloworld::uinfo() const {
  return uinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::lm::userinfo >*
helloworld::mutable_uinfo() {
  return &uinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lm_2ehelloworld_2eproto__INCLUDED
